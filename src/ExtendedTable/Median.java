/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ExtendedTable;
import java.awt.*;
import java.math.*;

import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;
/**
 *
 * @author Ahsan
 */
public class Median extends javax.swing.JFrame {

    /**
     * Creates new form Median
     */
    public Median() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(25);
        jTable1.setShowGrid(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel2.setText("jLabel1");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        jLabel3.setText("jLabel1");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 16)); // NOI18N
        jLabel4.setText("jLabel1");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 80, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(114, 114, 114)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 30)); // NOI18N
        jLabel5.setText("Median");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(111, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(89, 89, 89))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel5)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Median.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Median.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Median.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Median.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Median().setVisible(true);
            }
        });
    }
    
    //*************************** MY CODE *********************************
    
        Double limits[][];
        Integer frequency[];
        Integer commulativeFrequency[];
        String data[][];
        String column[];
    
        Median (Double limits[][], Integer frequency[], Integer commulativeFrequency[]){
        
            //this();
            setResizable(false);
            
            initComponents();

            this.limits =limits;
            this.frequency = frequency;
            this.commulativeFrequency = commulativeFrequency;
            
            jLabel1.setText("Median = l + ([(N / 2) - (\u03A3f1)] * C) / fmed");
           
            BigDecimal median[] = computeMedian();
            
            jLabel2.setText("Where l = " + (limits[0][median[2].intValue()] - 0.5) + ", N / 2 = " + median[3] + ", (\u03A3f1) = " + median[4] + ", C = " + median[5] + ", fmed = " + median[6]);
            
            jLabel3.setText("Median = " + (limits[0][median[2].intValue()] - 0.5) + " + ( [" + median[3] + " - " + median[4] + " * " + median[5] + "] ) / " + median[6]);
        
            jLabel4.setText("MEDIAN = " + median[0]);
            
            setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            
            // Initialize JTABLE
            
            data = new String[frequency.length ][4];

		for (int i = 0; i < frequency.length; i++) {

			data[i][0] = limits[0][i] + "-" + limits[1][i];
			data[i][1] = "" + frequency[i];
                        data[i][2] = "" + commulativeFrequency[i];
                        
                        if(median[3].compareTo(new BigDecimal(commulativeFrequency[i] + "")) == 1){
                            data[i][3] = commulativeFrequency[i] + " < " + median[3];
                        }
                        else{
                             data[i][3] = commulativeFrequency[i] + " > " + median[3];
                        }
                }
               // dat[x.length - 1][dat.length] = x[x.length - 1];
                 
		column = new String[]{ "Class Intevals", "Frequency F","Cummulative Frequency CF", "N / 2 = " + median[3]};
                jTable1.setModel(new javax.swing.table.DefaultTableModel(data,column)) ;
                
                DefaultTableCellRenderer rendar1 = new DefaultTableCellRenderer();
                rendar1.setForeground(Color.red);

                jTable1.getColumnModel().getColumn(median[2].intValue()).setCellRenderer(rendar1);
                //jTable1.setVisible(false);
                
                // init();
                 //jTable1 = new JTable(data, column);
        }
        
       /* private void init() {
        
            final CustomCellRenderer renderer = new CustomCellRenderer();
      
            jTable1 = new JTable(data, column) {
     
            //jTable1.setModel(new javax.swing.table.DefaultTableModel(data,column)){

            @Override
            public TableCellRenderer getCellRenderer(int row, int column) {
                return renderer;
            }

            };
      
        }
    */
	BigDecimal[] computeMedian() {

		int medianClassindex = -1;
		Double sizeOfMedianClass;
		BigDecimal median[] = new BigDecimal[7];

		Double halfOfN = commulativeFrequency[commulativeFrequency.length - 1] / 2.0;

		for (int i = 0; i < commulativeFrequency.length; i++)

			if (commulativeFrequency[i] >= halfOfN) {

				medianClassindex = i;
				break;
			}

		if (medianClassindex == -1 || medianClassindex == 0) {

			//System.out.println("\nCan not find Median Class. Please check your entered data.");
                        JOptionPane.showMessageDialog(this,"Median can not be computed");
			//System.exit(0);
                }
                //(limits[0][medianClassindex] - 0.5)// It is lower Boundary
                //(limits[1][medianClassindex] + 0.5)// It is Upper Boundary
                
		sizeOfMedianClass = (limits[1][medianClassindex] + 0.5) - (limits[0][medianClassindex] - 0.5);

		median[2] = new BigDecimal(medianClassindex);
		median[0] = new BigDecimal(halfOfN.toString())
				.subtract(new BigDecimal(commulativeFrequency[medianClassindex - 1]));
		median[0] = median[0].multiply(new BigDecimal(sizeOfMedianClass.toString()));

		median[0] = median[0].divide(new BigDecimal(frequency[medianClassindex]), 4, RoundingMode.CEILING);

		median[1] = median[0];
		median[0] = median[0].add(new BigDecimal ((limits[0][medianClassindex] - 0.5)));

		median[1] = median[1].add(new BigDecimal(limits[0][medianClassindex]));
                
                median[3] = new BigDecimal(halfOfN + "");
                median[4] = new BigDecimal(commulativeFrequency[medianClassindex - 1] + "");
                median[5] = new BigDecimal(sizeOfMedianClass.toString());
                median[6] = new BigDecimal(frequency[medianClassindex]);

		System.out.println("\nTotal Obsevations " + commulativeFrequency[commulativeFrequency.length - 1]);
		System.out.println("Lower Limit of median class l = " + (limits[0][medianClassindex] - 0.5));
		System.out.println("CF before median class CF = " + commulativeFrequency[medianClassindex - 1]);
		System.out.println("F of median class F = " + frequency[medianClassindex]);
		System.out.println("Class Size S =" + sizeOfMedianClass);
		System.out.println("N/2 " + halfOfN);
		return (median);
	}
        /*
    // PRIVATE CLASS
           private class CustomCellRenderer extends DefaultTableCellRenderer {

     
      public Component getTableCellRendererComponent(JTable table, Object value,
                                                     boolean isSelected, boolean hasFocus, int row, int column) {

         Component rendererComp = super.getTableCellRendererComponent(table, value,
               isSelected, hasFocus, row, column);

         // Very important to handle selected items (render them inversely colored)
         if (isSelected) {
            rendererComp.setBackground(getHuedColor(row).darker().darker());
            rendererComp.setForeground(getHuedColor(row).brighter().brighter());
         }
         else {
            rendererComp.setBackground(getHuedColor(row).brighter().brighter());
            rendererComp.setForeground(getHuedColor(row).darker().darker());
         }

         return rendererComp;
      }

      public Color getHuedColor(int hue) {
         return new Color(
               Color.HSBtoRGB(85 / 360f * hue, 0.7f, 1.0f
               ));
      }
   }*/
    //*************************** MY CODE *********************************

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
