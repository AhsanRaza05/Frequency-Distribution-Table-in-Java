/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ExtendedTable;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;

/**
 *
 * @author Ahsan
 */
public class ExtendedTableWithMeanMedianMode extends javax.swing.JFrame {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTitle = new javax.swing.JLabel();
        jMedianButton = new javax.swing.JButton();
        jMeanButton1 = new javax.swing.JButton();
        jModeButton = new javax.swing.JButton();
        jMeanButton2 = new javax.swing.JButton();
        jMeanButton3 = new javax.swing.JButton();
        jMeanButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setRowHeight(30);
        jTable1.setShowGrid(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jTitle.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jTitle.setText("Frequency Distribtion Table");
        jTitle.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jMedianButton.setText("Median");
        jMedianButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMedianButtonActionPerformed(evt);
            }
        });

        jMeanButton1.setText("Mean");
        jMeanButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMeanButton1ActionPerformed(evt);
            }
        });

        jModeButton.setText("Mode");
        jModeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModeButtonActionPerformed(evt);
            }
        });

        jMeanButton2.setText("Standard Deviation");
        jMeanButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMeanButton2ActionPerformed(evt);
            }
        });

        jMeanButton3.setText("Mean Deviation");
        jMeanButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMeanButton3ActionPerformed(evt);
            }
        });

        jMeanButton4.setText("Quantile");
        jMeanButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMeanButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jMeanButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMeanButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(106, 106, 106)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jMedianButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMeanButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                .addGap(121, 121, 121)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jModeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMeanButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE))
                .addContainerGap(226, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTitle)
                .addGap(365, 365, 365))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jMedianButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jModeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMeanButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jMeanButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMeanButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jMeanButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMedianButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMedianButtonActionPerformed
        // TODO add your handling code here:
        new Median(limits, frequency, commulativeFrequency).setVisible(true);

        /* BigDecimal median[];
       
        median = m.computeMedian();
        
         System.out.println("SIZE === " + median.length);
        
		System.out.println("\nWhen l = " + lowerBoundary[median[2].intValue()] + " Median is " + median[0]);
		System.out.println("\nWhen l = " + limits[0][median[2].intValue()] + " Median is " + median[1]);
         */
    }//GEN-LAST:event_jMedianButtonActionPerformed

    private void jModeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModeButtonActionPerformed
        // TODO add your handling code here:

        new Mode(limits, frequency).setVisible(true);
    }//GEN-LAST:event_jModeButtonActionPerformed

    private void jMeanButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMeanButton1ActionPerformed
        // TODO add your handling code here:

        Mean m = new Mean(limits, frequency, midPoint);
        m.setVisible(true);
    }//GEN-LAST:event_jMeanButton1ActionPerformed

    private void jMeanButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMeanButton2ActionPerformed
        // TODO add your handling code here:
        new StandardDeviation(limits, frequency, midPoint).setVisible(true);
    }//GEN-LAST:event_jMeanButton2ActionPerformed

    private void jMeanButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMeanButton3ActionPerformed
        // TODO add your handling code here:

        new MeanDeviation(limits, frequency, midPoint).setVisible(true);
        System.out.println("HI");
    }//GEN-LAST:event_jMeanButton3ActionPerformed

    private void jMeanButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMeanButton4ActionPerformed
        // TODO add your handling code here:

        new Quantile(limits, frequency, commulativeFrequency).setVisible(true);
    }//GEN-LAST:event_jMeanButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExtendedTableWithMeanMedianMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExtendedTableWithMeanMedianMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExtendedTableWithMeanMedianMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExtendedTableWithMeanMedianMode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ExtendedTable().setVisible(true);
            }
        });

        // ********************************* MYCODE ***************************
//        ExtendedTableWithMeanMedianMode a = new ExtendedTableWithMeanMedianMode();
//        a.setVisible(true);

        // ********************************* MYCODE ***************************
    }
// ******************************** MY CODE *********************************

    BigDecimal data[];

    Double limits[][];

    Double lowerBoundary[];
    Double upperBoundary[];

    Double midPoint[];
    Integer frequency[];
    Integer commulativeFrequency[];
    Integer NumberOfClasses;
    Integer totalFrequency;

    String tallyMarks[];

    Integer sizeOfClassInteval;
    BigDecimal average1, average2;

    //
    BigDecimal computeMeanDeviation() {

        BigDecimal MeanDeviation = new BigDecimal("0.0");
        BigDecimal tempMeanDeviation;
        BigDecimal mean = computeMean();

        System.out.println("\n MMMean is " + mean);

        for (int i = 0; i < midPoint.length; i++) {
            // MeanDeviation = MeanDeviation.add(new
            // BigDecimal(midPointsOfClass[i].toString()).subtract(mean).abs()
            // .multiply((new BigDecimal(Frequency[i]))));

            tempMeanDeviation = new BigDecimal(midPoint[i].toString()).subtract(mean);
            tempMeanDeviation = tempMeanDeviation.abs().multiply((new BigDecimal(frequency[i])));
            MeanDeviation = MeanDeviation.add(tempMeanDeviation);
        }
        MeanDeviation = MeanDeviation.divide(
                new BigDecimal(commulativeFrequency[commulativeFrequency.length - 1].toString()), 4,
                RoundingMode.CEILING);

        return (MeanDeviation);
    }

    BigDecimal computeMode() {

        Integer modalClassIndex = 0;
        Integer maxFrequency = frequency[0];
        Integer delta1, delta2;
        Double lowerclassBoundaryOfModalClass, sizeOfModalClass;
        BigDecimal mode;

        for (int i = 1; i < frequency.length; i++) {
            if (maxFrequency < frequency[i]) {
                maxFrequency = frequency[i];
                modalClassIndex = i;
            }
        }

        maxFrequency = null;

        lowerclassBoundaryOfModalClass = lowerBoundary[modalClassIndex];
        sizeOfModalClass = upperBoundary[modalClassIndex] - lowerBoundary[modalClassIndex];

        if (modalClassIndex == 0) {
            delta1 = frequency[modalClassIndex];
        } else {
            delta1 = frequency[modalClassIndex] - frequency[modalClassIndex - 1];
        }

        if (modalClassIndex == frequency.length - 1) {
            delta2 = frequency[modalClassIndex];
        } else {
            delta2 = frequency[modalClassIndex] - frequency[modalClassIndex + 1];
        }

        mode = new BigDecimal(delta1 + delta2);
        mode = new BigDecimal(delta1).divide(mode, 4, RoundingMode.CEILING);
        mode = mode.multiply(new BigDecimal(sizeOfModalClass));
        mode = mode.add(new BigDecimal(lowerclassBoundaryOfModalClass));
        return (mode);
    }

    BigDecimal[] computeMedian() {

        int medianClassindex = -1;
        Double sizeOfMedianClass;
        BigDecimal median[] = new BigDecimal[3];

        Double halfOfN = commulativeFrequency[commulativeFrequency.length - 1] / 2.0;

        for (int i = 0; i < commulativeFrequency.length; i++) {
            if (commulativeFrequency[i] >= halfOfN) {

                medianClassindex = i;
                break;
            }
        }

        if (medianClassindex == -1) {

            System.out.println("\nCan not find Median Class. Please check your entered data.");
            System.exit(0);
        }

        sizeOfMedianClass = upperBoundary[medianClassindex] - lowerBoundary[medianClassindex];

        median[2] = new BigDecimal(medianClassindex);
        median[0] = new BigDecimal(halfOfN.toString())
                .subtract(new BigDecimal(commulativeFrequency[medianClassindex - 1]));
        median[0] = median[0].multiply(new BigDecimal(sizeOfMedianClass.toString()));

        median[0] = median[0].divide(new BigDecimal(frequency[medianClassindex]), 4, RoundingMode.CEILING);

        median[1] = median[0];

        median[0] = median[0].add(new BigDecimal(lowerBoundary[medianClassindex]));

        median[1] = median[1].add(new BigDecimal(limits[0][medianClassindex]));

        /*System.out.println("\nTotal Obsevations " + commulativeFrequency[commulativeFrequency.length - 1]);
		System.out.println("Lower Limit of median class l = " + lowerBoundary[medianClassindex]);
		System.out.println("CF before median class CF = " + commulativeFrequency[medianClassindex - 1]);
		System.out.println("F of median class F = " + frequency[medianClassindex]);
		System.out.println("Class Size S =" + sizeOfMedianClass);
		System.out.println("N/2 " + halfOfN);*/
        return (median);
    }

    BigDecimal computeMean() {

        BigDecimal mean = new BigDecimal("0");

        System.out.println();
        for (int i = 0; i < frequency.length; i++) {
            mean = mean.add(new BigDecimal(frequency[i] + "").multiply(new BigDecimal(midPoint[i] + "")));
        }
        // System.out.println(mean);

        return (mean.divide(new BigDecimal(data.length), 4, RoundingMode.CEILING));
    }

    
    public static boolean isValidInput(String allText){
    
        String []x = allText.split("\n");

        //System.out.println(InputData.inputJTextArea.getText());
        
        String y[][] = new String[3][];
        
        if(x.length != 3){
            JOptionPane.showMessageDialog(null, "Invalid Format!");    
            return false;
        }
        
        for (int i = 0; i < x.length; i++) {
            
            // System.out.println(x);

            if (x[i].contains(",")) {
                if (x[i].contains(", ")) {
                    y[i] = x[i].split(", ");
                } else {
                    y[i] = x[i].split(",");
                }
            } else if (x[i].contains(" ")) {
                y[i] = x[i].split(" ");
            } else {
                
                JOptionPane.showMessageDialog(null, "Please enter data in valid format.");
//                System.out.println("Please enter data in valid format.");
                return false;
            }
        }

        if (y[0].length != y[1].length || y[0].length != y[2].length) {
            
            JOptionPane.showMessageDialog(null, "No. of Upper & Lower limts & Frequencies should be same.");
            System.out.println("No. of Upper & Lower limts & Frequencies should be same.");
            return false;
        }
        
        return true;
    }
    
    boolean getInput(String allText){
        
        String []x = allText.split("\n");

        //System.out.println(InputData.inputJTextArea.getText());
        
        String y[][] = new String[3][];
        
        if(x.length != 3){
            JOptionPane.showMessageDialog(this, "Invalid Format!");    
            return false;
        }
        
        for (int i = 0; i < x.length; i++) {
            
            // System.out.println(x);

            if (x[i].contains(",")) {
                if (x[i].contains(", ")) {
                    y[i] = x[i].split(", ");
                } else {
                    y[i] = x[i].split(",");
                }
            } else if (x[i].contains(" ")) {
                y[i] = x[i].split(" ");
            } else {
                
                JOptionPane.showMessageDialog(this, "Please enter data in valid format.");
//                System.out.println("Please enter data in valid format.");
                return false;
            }
        }

        if (y[0].length != y[1].length || y[0].length != y[2].length) {
            
            JOptionPane.showMessageDialog(this, "No. of Upper & Lower limts & Frequencies should be same.");
            System.out.println("No. of Upper & Lower limts & Frequencies should be same.");
            return false;
        }
        limits = new Double[2][y[0].length];

        for (int i = 0; i < y[0].length; i++) {

            limits[0][i] = Double.parseDouble(y[0][i]);
            limits[1][i] = Double.parseDouble(y[1][i]);
        }

        //System.out.println("Limits");
        for (int i = 0; i < limits[0].length; i++) //System.out.println(limits[0][i] + "-" + limits[1][i]);
        {
            frequency = new Integer[y[2].length];
        }

        for (Integer i = 0; i < y[2].length; i++) {
            frequency[i] = Integer.parseInt(y[2][i]);
        }

        y = null;

        return true;
    }
    
    boolean readFile() throws Exception {

        String x;

        String y[][] = new String[3][];
        File f = new File(
                System.getProperty("user.dir") + "/Input0.txt");

// "C:/Users/Ahsan/Desktop/Java/Programs in
        // Eclipse/SP/MeanMedianModebyGroupdata/Median/Input14.txt");
        // f.createNewFile();
        // "C:\\Users\\Ahsan\\Desktop\\JAVA\\Java\\Programs in
        // Eclipse\\SP\\MeanMedianModebyGroupdata\\Median\Input14.txt"
        BufferedReader rd = new BufferedReader(new FileReader(f));

        /*
		 * uLlLf[0] = rd.readLine(); uLlLf[1] = rd.readLine(); uLlLf[2] = rd.readLine();
         */
        for (int i = 0; i < 3; i++) {

            x = rd.readLine();
            // System.out.println(x);

            if (x.contains(",")) {
                if (x.contains(", ")) {
                    y[i] = x.split(", ");
                } else {
                    y[i] = x.split(",");
                }
            } else if (x.contains(" ")) {
                y[i] = x.split(" ");
            } else {
                System.out.println("Please enter data in valid format.");
                return false;
            }
        }

        if (y[0].length != y[1].length || y[0].length != y[2].length) {
            System.out.println("No. of Upper & Lower limts & Frequencies should be same.");
            return false;
        }
        limits = new Double[2][y[0].length];

        for (int i = 0; i < y[0].length; i++) {

            limits[0][i] = Double.parseDouble(y[0][i]);
            limits[1][i] = Double.parseDouble(y[1][i]);
        }

        //System.out.println("Limits");
        for (int i = 0; i < limits[0].length; i++) //System.out.println(limits[0][i] + "-" + limits[1][i]);
        {
            frequency = new Integer[y[2].length];
        }

        for (Integer i = 0; i < y[2].length; i++) {
            frequency[i] = Integer.parseInt(y[2][i]);
        }

        y = null;

        rd.close();

        return true;
    }

    void computeBondaries() {
        lowerBoundary = new Double[limits[0].length];
        upperBoundary = new Double[limits[1].length];

        //System.out.println();
        //System.out.print("Lower Boundaries and Upper Boundaries\n");
        for (int i = 0; i < limits[0].length; i++) {
            lowerBoundary[i] = limits[0][i] - 0.5;
        }

        for (int i = 0; i < limits[0].length; i++) {

            /*if ((i + 1) < limits[0].length && Integer.parseInt(limits[1][i]) == Integer.parseInt(limits[0][i + 1]))
				upperBoundary[i] = Integer.parseInt(limits[1][i]) - 1 + 0.5;

			else
				upperBoundary[i] = Integer.parseInt(limits[1][i]) + 0.5;*/
            upperBoundary[i] = limits[1][i] + 0.5;

            //System.out.print(lowerBoundary[i] + "-");
            //System.out.println(upperBoundary[i]);
        }

        //System.out.println();
    }

    void computeCommulativeFrequency() {

        totalFrequency = 0;
        commulativeFrequency = new Integer[limits[0].length];

        //System.out.print("\nCommulative Frequencies ");
        commulativeFrequency[0] = frequency[0];
        //System.out.print(commulativeFrequency[0] + " ");

        for (int i = 1; i < limits[0].length; i++) {
            commulativeFrequency[i] = frequency[i] + commulativeFrequency[i - 1];
            //	System.out.print(commulativeFrequency[i] + " ");
        }
        totalFrequency = commulativeFrequency[frequency.length - 1];
    }

    void computeMidPoint() {

        midPoint = new Double[limits[0].length];

        //System.out.print("Mid Points ");
        for (int i = 0; i < limits[0].length; i++) {
            midPoint[i] = (limits[0][i] + limits[1][i]) / 2.0;
            //System.out.print(midPoint[i] + " ");
        }
    }

    public ExtendedTableWithMeanMedianMode(String x) throws Exception {

        initComponents();
        setResizable(false);

        System.out.println("Inside Extended Table");
        
        //new InputData();
        
        if (getInput(x)) {

            tallyMarks = new String[frequency.length];
            NumberOfClasses = frequency.length;
            computeBondaries();
            makeTallyMarks();
            computeMidPoint();
            computeCommulativeFrequency();

            String dat[][] = new String[NumberOfClasses + 1][6];

            for (int i = 0; i < NumberOfClasses; i++) {

                dat[i][0] = limits[0][i] + "-" + limits[1][i];
                dat[i][1] = "" + frequency[i];
                dat[i][2] = lowerBoundary[i] + "-" + upperBoundary[i];
                dat[i][3] = "" + midPoint[i];
                dat[i][4] = "" + commulativeFrequency[i];
                dat[i][5] = "" + tallyMarks[i];
            }
            // dat[x.length - 1][dat.length] = x[x.length - 1];

            String column[] = {"Class Intevals", "Frequency", "Class Boundaries", "Class Mid Points", "Cummulative Frequency", "Tally Marks"};
            jTable1.setModel(new javax.swing.table.DefaultTableModel(dat, column));
        }

    }

    void makeTallyMarks() {

        int y = 0;
        //String x[];
        //frequency = new Integer[tallyMarks.length];
        //x = new String[tallyMarks.length + 1];
        Integer total = 0;

        for (int i = 0; i < tallyMarks.length; i++) {

            tallyMarks[i] = "";
            y = 0;

            int o = 0;

            for (int j = 0; j < frequency[i]; j++) {

                if (tallyMarks[i].substring(y).length() == 4) {

                    tallyMarks[i] += "/ ";
                    y += 2 + 4;
                } else {
                    tallyMarks[i] += "|";
                }

                o++;

            }

            total += o;
        }

    }

// ******************************** MY CODE *********************************
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jMeanButton1;
    private javax.swing.JButton jMeanButton2;
    private javax.swing.JButton jMeanButton3;
    private javax.swing.JButton jMeanButton4;
    private javax.swing.JButton jMedianButton;
    private javax.swing.JButton jModeButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel jTitle;
    // End of variables declaration//GEN-END:variables
}
