/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package FrequencyDistributionTable_FDT;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.math.BigDecimal;
import java.math.RoundingMode;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;


/**
 *
 * @author Ahsan
 */
public class FrequencyDistributionTable extends javax.swing.JFrame {

    /**
     * Creates new form FrequencyDistributionTable
     */
    public FrequencyDistributionTable() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setGridColor(new java.awt.Color(102, 0, 102));
        jTable1.setRowHeight(25);
        jTable1.setRowMargin(5);
        jTable1.setShowGrid(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception{
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrequencyDistributionTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrequencyDistributionTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrequencyDistributionTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrequencyDistributionTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new FrequencyDistributionTable().setVisible(true);
            }
        });
        
        
        // ********************************* MYCODE ***************************
        
        System.out.println(System.getProperty("user.dir") + "\\FDTDATA.txt");
		//File f = new File();
               // f.createNewFile();
		// File f = new File("C:\\Users\\Ahsan\\Desktop\\Java\\Programs in
		// Eclipse\\SP\\bookex1.txt");
		File f = new File(System.getProperty("user.dir") + "\\FDTDATA.txt");
		//File f = new File(System.getProperty("user.dir") + "\\pdfdata2.txt");

		BufferedReader bf = new BufferedReader(new FileReader(f));

		String s = bf.readLine();
                String data1[] ;
                
                
                if (s.contains(","))
			if (s.contains(", "))
				data1 = s.split(", ");
			else
				data1 = s.split(",");

			else if (s.contains(" "))
				data1 = s.split(" ");

			else {
				System.out.println("Please enter data in valid format.");
				System.exit(0);
                                data1 = null;
			}
		// System.out.println(s);
		//String data1[] = s.split(" ");

		BigDecimal data2[] = new BigDecimal[data1.length];

		for (int i = 0; i < data1.length; i++)
			data2[i] = new BigDecimal(data1[i]);
		data1 = null;

		s = bf.readLine();
		bf.close();
                System.out.println(s);
		System.out.println(Integer.valueOf(s));
                
                FrequencyDistributionTable a = new FrequencyDistributionTable(data2, Integer.valueOf(s));
                a.setVisible(true);
        
        // ********************************* MYCODE ***************************
    }

    // *********************************** MY CODE *****************************
    
    	BigDecimal data[];

	BigDecimal lowerLimitsOfInterval[];
	BigDecimal upperLimitsOfInterval[];

	BigDecimal lowerBoundariesOfInterval[];
	BigDecimal upperBoundariesOfInterval[];

	BigDecimal midPoint[];
	Integer frequency[];
	Integer NumberOfClasses;

	String tallyMarks[] = new String[5];
	String x[];

	BigDecimal range;
	BigDecimal sizeOfClassInteval;
	BigDecimal average1, average2;
        
        
        public FrequencyDistributionTable(BigDecimal[] data, Integer NumberOfClasses) {
		
		this();
                
                this.data = data;
		this.tallyMarks = new String[NumberOfClasses];
		this.frequency = new Integer[NumberOfClasses];
		this.NumberOfClasses = NumberOfClasses;

		computeRange();
		computeSizeOfClassInteval(NumberOfClasses);
		computeLimitsAndBoundariesOfClasses();

		makeTallyMarks();
		computeAverageUnGroupData();
		computeAverageGroupData();

		String dat[][] = new String[tallyMarks.length + 1][3];

		for (int i = 0; i < tallyMarks.length; i++) {

			dat[i][0] = lowerLimitsOfInterval[i].toString() + "-" + upperLimitsOfInterval[i].toString();
			dat[i][1] = tallyMarks[i];
			dat[i][2] = x[i];
		}

		dat[x.length - 1][2] = x[x.length - 1];

		String column[] = { "Class Intevals", "Tally Marks", "Frequency" };
                jTable1.setModel(new javax.swing.table.DefaultTableModel(dat,column));
                
	}
        
        void computeLimitsAndBoundariesOfClasses() {

		BigDecimal smallest = data[0];
		lowerBoundariesOfInterval = new BigDecimal[NumberOfClasses];
		upperBoundariesOfInterval = new BigDecimal[NumberOfClasses];

		lowerLimitsOfInterval = new BigDecimal[NumberOfClasses];
		upperLimitsOfInterval = new BigDecimal[NumberOfClasses];

		for (int i = 0; i < data.length; i++)// To find Smallest number
			if (data[i].compareTo(smallest) == -1)
				smallest = data[i];

		lowerLimitsOfInterval[0] = smallest;
		for (int i = 1; i < NumberOfClasses; i++)
			lowerLimitsOfInterval[i] = lowerLimitsOfInterval[i - 1].add(sizeOfClassInteval);
		// System.out.print("Lower Limits of Class" + lowerLimitsOfInterval[i]);
		upperLimitsOfInterval[0] = lowerLimitsOfInterval[1].subtract(new BigDecimal("1"));
		for (int i = 1; i < NumberOfClasses; i++)
			upperLimitsOfInterval[i] = upperLimitsOfInterval[i - 1].add(sizeOfClassInteval);
		// System.out.print("Upper Limits of Class" + upperLimitsOfInterval[i]);

		for (int i = 0; i < NumberOfClasses; i++)
			lowerBoundariesOfInterval[i] = lowerLimitsOfInterval[i].subtract(new BigDecimal("0.5"));
		// System.out.print("Lower Boundaries of Class" + lowerBoundariesOfInterval[i]);

		for (int i = 0; i < NumberOfClasses; i++)
			upperBoundariesOfInterval[i] = upperLimitsOfInterval[i].add(new BigDecimal("0.5"));
		// System.out.print("Upper Boundaries of Class" + upperBoundariesOfInterval[i]);
	}

	void computeAverageUnGroupData() {

		average1 = new BigDecimal("0.0");
		for (int i = 0; i < data.length; i++)
			average1 = average1.add(data[i]);

		System.out.format("\nThe exact sum is %f\n", average1);
		average1 = average1.divide(new BigDecimal(data.length), 2, RoundingMode.HALF_UP);
		System.out.format("The exact average is %f\n", average1);
	}

	void computeAverageGroupData() {

		midPoint = new BigDecimal[upperLimitsOfInterval.length];
		average2 = new BigDecimal("0.0");

		System.out.print("The mid points: ");

		for (int i = 0; i < upperLimitsOfInterval.length; i++) {

			midPoint[i] = upperLimitsOfInterval[i].add(lowerLimitsOfInterval[i]);
			midPoint[i] = midPoint[i].divide(new BigDecimal("2.0"));
			System.out.print(midPoint[i] + " ");
		}
		System.out.println();

		for (int i = 0; i < midPoint.length; i++)
			average2 = average2.add(midPoint[i].multiply(new BigDecimal(frequency[i])));

		System.out.format("The non exact sum is %f\n", average2);
		average2 = average2.divide(new BigDecimal(data.length), 2, RoundingMode.HALF_UP);
		System.out.format("The non exact average is %f\n", average2);
	}

	void makeTallyMarks() {

		int y = 0;
		String x[];
		frequency = new Integer[tallyMarks.length];
		x = new String[tallyMarks.length + 1];
		Integer total = 0;

		for (int i = 0; i < tallyMarks.length; i++) {

			tallyMarks[i] = "";
			y = 0;

			int o = 0;
			x[i] = " (";
			for (int j = 0; j < data.length; j++){

				if ((data[j].compareTo(lowerBoundariesOfInterval[i]) == 1
						|| data[j].compareTo(lowerBoundariesOfInterval[i]) == 0)
						&& (data[j].compareTo(upperBoundariesOfInterval[i]) == -1)) {

					if (tallyMarks[i].substring(y).length() == 4) {

						tallyMarks[i] += "/ ";
						y += 2 + 4;
					} else
						tallyMarks[i] += "|";

					x[i] += data[j].toString() + ",";
                                        
                                        //if((j + 1) % 10 == 0){
                                            
                                          //  x[i] += "\n";
                                        //}
                                        
					o++;
				}
			// System.out.println(x[i]);
                                
                        }
			x[i] = x[i].substring(0, x[i].length() - 1) + ")";
			// System.out.println(x[i]);
			total += o;
			frequency[i] = o;
			x[i] = (o) + x[i];
			// System.out.println(x[i]);
		}

		x[x.length - 1] = "Total--> %d".formatted(total);

		this.x = x;

	}

	void computeRange() {

		BigDecimal smallest = data[0];
		BigDecimal largest = data[0];

		// System.out.println("HI" + data.length);
		for (int i = 0; i < data.length; i++) {

			// if (data[i] > largest)
			if (data[i].compareTo(largest) == 1)
				largest = data[i];

			if (data[i].compareTo(smallest) == -1)
				smallest = data[i];
		}
		System.out.println("\nSmallest: " + smallest);
		System.out.println("\nLargest: " + largest);
		range = largest.subtract(smallest);
		System.out.println("\nRange: " + range);
	}

	void computeSizeOfClassInteval(Integer TotalNumberOfClassIntervals) {

		sizeOfClassInteval = new BigDecimal(TotalNumberOfClassIntervals);

		sizeOfClassInteval = range.divide(new BigDecimal(TotalNumberOfClassIntervals), 2, RoundingMode.HALF_UP);

		sizeOfClassInteval = sizeOfClassInteval.setScale(0, RoundingMode.CEILING);

		System.out.println("\nSizeOfClassInterval: " + sizeOfClassInteval);
        }
    
     // *********************************** MY CODE *****************************
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
